// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: invoice-items.sql

package queries

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createInvoiceItem = `-- name: CreateInvoiceItem :one
INSERT INTO invoice_items (
  invoice_id,
  item,
  amount
) VALUES (
  $1, $2 , $3
)
RETURNING invoice_item_id, invoice_id, item, amount, created_at
`

type CreateInvoiceItemParams struct {
	InvoiceID string
	Item      string
	Amount    pgtype.Numeric
}

func (q *Queries) CreateInvoiceItem(ctx context.Context, arg CreateInvoiceItemParams) (InvoiceItem, error) {
	row := q.db.QueryRow(ctx, createInvoiceItem, arg.InvoiceID, arg.Item, arg.Amount)
	var i InvoiceItem
	err := row.Scan(
		&i.InvoiceItemID,
		&i.InvoiceID,
		&i.Item,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}

const getInvoiceItemDataByInvoiceID = `-- name: GetInvoiceItemDataByInvoiceID :many
SELECT item,amount FROM invoice_items WHERE invoice_id = $1
`

type GetInvoiceItemDataByInvoiceIDRow struct {
	Item   string
	Amount pgtype.Numeric
}

func (q *Queries) GetInvoiceItemDataByInvoiceID(ctx context.Context, invoiceID string) ([]GetInvoiceItemDataByInvoiceIDRow, error) {
	rows, err := q.db.Query(ctx, getInvoiceItemDataByInvoiceID, invoiceID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetInvoiceItemDataByInvoiceIDRow
	for rows.Next() {
		var i GetInvoiceItemDataByInvoiceIDRow
		if err := rows.Scan(&i.Item, &i.Amount); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
