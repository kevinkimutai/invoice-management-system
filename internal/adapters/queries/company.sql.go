// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: company.sql

package queries

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createCompany = `-- name: CreateCompany :one
INSERT INTO company (
  logo_url, user_id, company_name
) VALUES (
  $1, $2, $3
)
RETURNING company_id, logo_url, user_id, company_name, created_at
`

type CreateCompanyParams struct {
	LogoUrl     string
	UserID      pgtype.Int8
	CompanyName string
}

func (q *Queries) CreateCompany(ctx context.Context, arg CreateCompanyParams) (Company, error) {
	row := q.db.QueryRow(ctx, createCompany, arg.LogoUrl, arg.UserID, arg.CompanyName)
	var i Company
	err := row.Scan(
		&i.CompanyID,
		&i.LogoUrl,
		&i.UserID,
		&i.CompanyName,
		&i.CreatedAt,
	)
	return i, err
}

const deleteCompany = `-- name: DeleteCompany :exec
DELETE FROM company
WHERE company_id = $1
`

func (q *Queries) DeleteCompany(ctx context.Context, companyID int64) error {
	_, err := q.db.Exec(ctx, deleteCompany, companyID)
	return err
}

const getCompany = `-- name: GetCompany :one
SELECT company_id, logo_url, user_id, company_name, created_at FROM company
WHERE company_id = $1 LIMIT 1
`

func (q *Queries) GetCompany(ctx context.Context, companyID int64) (Company, error) {
	row := q.db.QueryRow(ctx, getCompany, companyID)
	var i Company
	err := row.Scan(
		&i.CompanyID,
		&i.LogoUrl,
		&i.UserID,
		&i.CompanyName,
		&i.CreatedAt,
	)
	return i, err
}

const getTotalCompaniesCount = `-- name: GetTotalCompaniesCount :one
SELECT COUNT(*) FROM company
`

func (q *Queries) GetTotalCompaniesCount(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, getTotalCompaniesCount)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const listCompany = `-- name: ListCompany :many
SELECT company_id, logo_url, user_id, company_name, created_at FROM company
ORDER BY company_name
LIMIT $1 OFFSET $2
`

type ListCompanyParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) ListCompany(ctx context.Context, arg ListCompanyParams) ([]Company, error) {
	rows, err := q.db.Query(ctx, listCompany, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Company
	for rows.Next() {
		var i Company
		if err := rows.Scan(
			&i.CompanyID,
			&i.LogoUrl,
			&i.UserID,
			&i.CompanyName,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCompany = `-- name: UpdateCompany :exec
UPDATE company
  set logo_url = $2,
  company_name = $3
WHERE company_id = $1
`

type UpdateCompanyParams struct {
	CompanyID   int64
	LogoUrl     string
	CompanyName string
}

func (q *Queries) UpdateCompany(ctx context.Context, arg UpdateCompanyParams) error {
	_, err := q.db.Exec(ctx, updateCompany, arg.CompanyID, arg.LogoUrl, arg.CompanyName)
	return err
}
